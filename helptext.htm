<!-- #include helptext $GetVar(FragmentDB_plugin_path)/helptext.htm;onclick=#onclick;1; -->

$+
SetVar(fdb_chooser, 
    "Choose the desired fragment from the list in the drop-down menu. 
    <br>
    ~Searching~
    <br>
    Do an unsharp search with a partial name and *hit enter key*. 
    <br>
    For example a search for cf3 finds all the fragments containing cf3 in their 
    name and similar. <br>
    The search results in a shortened drop down menue.
    <br>
    ~Reset~
    <br>
    The reset button restores the full fragment list after a search.
    <br>
    ~User Defined Database~
    <br>
    The main database is write protected, but you can add and change as many 
    fragments you like. They will be stored in a separate database.
    <br>
    Fragments created or changed by the user will get a #user# at 
    the end of their names.  
    ")
$-
$+
SetVar(fdb_picture, 
    "
    Displays a picture of the fragment. User defined fragments 
    only have pictures if the user provided one.
    <br>
    Click on the picture to display a magnified version of the picture.
    ")
$-
$+
SetVar(fdb_props, 
    "Define PART, free variables (FVAR) and the occupancy here.
    <br>
    A free variable of 3 and an occupancy of 1 means 31.0 in SHELXL notation. 
    -31.0 On the other hand is set with a free variable of -3.
    <br>
    <br>
    All parameters will be displayed simultaneously with atomic labels.")
$-
$+
SetVar(fdb_resi, 
    "
    Define *residue number* and *residue class*. 
    Usually it is not nessecary to change anything here.
    <br>
    *Disable* residues with a residue number *0*.  
    <br>
    The residue number must be uniqe. The plugin automatically chooses the next 
    unused residue number. So it is best to leave it untouched. The residue class 
    has to start with a letter and can be up to four characters. Usually, 
    the class provided by the database is sufficient.
    <br>
    ~DFIX~
    <br> 
    The supplied fragment normally has predefines restraints like
    SADI, FLAT and others. 
    *DFIX* Generates DFIX/DANG restraints from the geometry of the fragment and 
    replaces the predefined restraints.
    <br>
    ~Invert~
    <br>
    Inverts the coordinates of the fragment. Useful to fit the inverted geometry 
    of the fragment.
    ")
$-
$+
SetVar(fdb_fit, 
    "~Fit!~
    <br> 
    The button *Fit!* starts the fit of the Fragment into the structure. 
    <br>
    ~Edit~
    <br>
    Edit or create new fragments:
    <br>
    *Change Picture:* 
    Select a picture for the fragment. Use at least 600dpi pictures.
    <br>
    *Drawstyle:* 
    Save a style file for chemdraw to draw molecular pictures that look 
    the same as the predefined.
    <br>
    *Name:* 
    Name of the fragment
    <br>
    *Unit cell:* 
    Cell parameters of the structure, where the fragment comes from. 
    Use 1 1 1 90 90 90 for cartesian coordinates. The cell constants and the 
    coordinates are converted into Cartesian coordinates during the adding to 
    the database.
    <br>
    *Use selected atoms:* 
    Uses the selected atoms for the Atoms field and creates a picture from the 
    fragment.
    <br>
    *Atoms:* 
    insert atoms here like O2  8  1.3984  -0.3778   0.4922. You can also 
    directly copy atoms from SHELX files or copy coordiinates from Avogadro.
    <br>
    *Restraints:* 
    Type any SHELX compatible restraint here (except SAME). 
    The length of a line is unlimited.
    <br>
    *Residue:* 
    Define the residue class of the fragment (up to four characters, the first has to be a letter). 
    <br>
    *Reference* 
    Define the origin of the fragment.
    <br>
    ~Reference~
    <br>
    The reference field shows the origin of the fragment.
    ")
        
$-
